AWSTemplateFormatVersion: '2010-09-09'
Description:  This template represents the SSMSetup stackset deployed by the SSM Quick Setup for AWS Organizations.
Parameters:
  SpecifyTargetTagNameChoice:
    Description: Quick Setup Choice - Specify Target Instance Tag Name, choose "InstanceIds" for all instances.
    Type: String
    Default:  "InstanceIds"
  SpecifyTargetTagValueChoice:
    Description: Quick Setup Choice - Specify Target Instance Tag Value, choose "*" for all instances
    Type: String
    Default:  "*"
  UpdateSSMAgentChoice:
    Description: Quick Setup Choice - Update Systems Manager (SSM) Agent every two weeks
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default:  "true"
  CollectInventoryChoice:
    Description: Quick Setup Choice - Collect inventory from your instances every 30 minutes
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default:  "true"
  ScanForPatchesChoice:
    Description: Quick Setup Choice - Scan instances for missing patches daily
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default:  "true"
  InstallConfigureCloudWatchChoice:
    Description: Quick Setup Choice - Install and configure the CloudWatch agent
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default:  "true"
  CloudWatchAgentConfigS3Bucket:
    Description: Specify the centralized S3 bucket name used to store the CloudWatch configuration files.
    Type: String
  UpdateCloudWatchAgentChoice:
    Description: Quick Setup Choice - Update the CloudWatch agent once every 30 days
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default:  "true"

Conditions:
  UpdateSSMAgentChoiceCondition: !Equals ["true", !Ref UpdateSSMAgentChoice]
  CollectInventoryChoiceCondition: !Equals ["true", !Ref CollectInventoryChoice]
  ScanForPatchesChoiceCondition: !Equals ["true", !Ref ScanForPatchesChoice]
  InstallConfigureCloudWatchChoiceCondition: !Equals ["true", !Ref InstallConfigureCloudWatchChoice]
  UpdateCloudWatchAgentChoiceCondition: !Equals ["true", !Ref UpdateCloudWatchAgentChoice]

Resources:
## Roles
  AmazonSSMRoleForInstancesQuickSetup:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "AmazonSSMRoleForInstancesQuickSetup_${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ReadCentralizedCloudWatchS3ConfigBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ReadCentralizedCloudWatchS3ConfigBucket
                Action:
                  - s3:GetObject
                Resource: arn:aws:s3:::${AWS::AccountId}/*
                Effect: Allow

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "AmazonSSMRoleForInstancesQuickSetup_${AWS::Region}"
      Path: "/"
      Roles:
        - !Ref AmazonSSMRoleForInstancesQuickSetup


  AmazonSSMRoleForAutomationAssumeQuickSetup:
    Type: AWS::IAM::Role
    Properties:
      Description: AmazonSSMRoleForAutomationAssumeQuickSetup
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      RoleName: !Sub "AmazonSSMRoleForAutomationAssumeQuickSetup_${AWS::Region}"
      Policies:
        - PolicyName: SSMQuickSetupCreateAndAttachRoleInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetAutomationExecution
                  - ec2:DescribeIamInstanceProfileAssociations
                  - ec2:AssociateIamInstanceProfile
                  - ssm:StartAutomationExecution
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:GetInstanceProfile
                Resource:
                  - !GetAtt AmazonSSMRoleForInstancesQuickSetup.Arn
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - iam:GetRole
                Resource:
                  - !GetAtt AmazonSSMRoleForInstancesQuickSetup.Arn
                  - !Sub "arn:${AWS::Partition}:iam::*:role/AmazonSSMRoleForAutomationAssumeQuickSetup_${AWS::Region}"
              - Effect: Allow
                Action:
                  - iam:ListInstanceProfilesForRole
                  - iam:AttachRolePolicy
                Resource:
                  - !GetAtt AmazonSSMRoleForInstancesQuickSetup.Arn
        - PolicyName: SSMQuickSetupEnableExplorerInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListRoles
                  - config:DescribeConfigurationRecorders
                  - compute-optimizer:GetEnrollmentStatus
                  - support:DescribeTrustedAdvisorChecks
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:UpdateServiceSetting
                  - ssm:GetServiceSetting
                Resource:
                  - !Sub "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsitem/ssm-patchmanager"
                  - !Sub "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsitem/EC2"
                  - !Sub "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsdata/ExplorerOnboarded"
                  - !Sub "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsdata/Association"
                  - !Sub "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsdata/OpsData-TrustedAdvisor"
                  - !Sub "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsdata/ComputeOptimizer"
                  - !Sub "arn:${AWS::Partition}:ssm:*:*:servicesetting/ssm/opsdata/SupportCenterCase"
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/aws-service-role/ssm.${AWS::URLSuffix}/AWSServiceRoleForAmazonSSM"
## end roles


  SystemAssociationForManagingInstances:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: SSMQuickSetupSystemAssociationForManagingInstances
      AutomationTargetParameterName: InstanceId
      ScheduleExpression: rate(1 day)
      Name: !Ref AttachIAMToInstance
      Parameters:
        AutomationAssumeRole:
          - !GetAtt AmazonSSMRoleForAutomationAssumeQuickSetup.Arn
      Targets:
        - Key: !Ref SpecifyTargetTagNameChoice
          Values:
            - !Ref SpecifyTargetTagValueChoice

  SystemAssociationForEnablingExplorer:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: SSMQuickSetupSystemAssociationForEnablingExplorer
      Name: !Ref enableExplorerDocument
      Parameters:
        AutomationAssumeRole:
          - !GetAtt AmazonSSMRoleForAutomationAssumeQuickSetup.Arn

  enableExplorerDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        description: Enable Explorer in target accounts for master account
        schemaVersion: '0.3'
        assumeRole: "{{AutomationAssumeRole}}"
        parameters:
          AutomationAssumeRole:
            type: String
        mainSteps:
          - name: Test
            action: aws:executeScript
            inputs:
              Runtime: python3.6
              Handler: script_handler
              Script: |
                import boto3
                import time
                import random
                from botocore.exceptions import ClientError
                from functools import partial, wraps

                def script_handler(events, context):
                    enable_explorer()

                def enable_explorer():
                    iam_client = boto3.client("iam")
                    response = iam_client.list_roles(PathPrefix='/aws-service-role/ssm.amazonaws.com/')
                    if len(response.get('Roles', [])) == 0:
                        print(print('Service linked role for ssm.amazonaws.com does not exist in target account',
                          'attempting to create service linked role'))
                        iam_client.create_service_linked_role(AWSServiceName="ssm.amazonaws.com")

                    ssm_client = boto3.client("ssm")

                    update_service_setting(ssm_client,'/ssm/opsitem/ssm-patchmanager', 'Enabled')
                    update_service_setting(ssm_client, '/ssm/opsdata/Association', 'Enabled')
                    if hasEC2RecordingEnabled():
                        update_service_setting(ssm_client, '/ssm/opsitem/EC2', 'Enabled')

                    if shouldEnableTrustedAdvisor():
                        update_service_setting(ssm_client, '/ssm/opsdata/OpsData-TrustedAdvisor', 'Enabled')
                    if shouldEnableComputeOptimizer():
                        update_service_setting(ssm_client, '/ssm/opsdata/ComputeOptimizer', 'Enabled')
                    update_service_setting(ssm_client, '/ssm/opsdata/ExplorerOnboarded', 'true')

                def back_off_retry(retryable_api_call=None, api_name=''):

                    if retryable_api_call is None:
                        return partial(back_off_retry, api_name=api_name)

                    @wraps(retryable_api_call)
                    def retry(*args, **kwargs):
                        max_retry_times = 5
                        current_retry = 0
                        ssm_client = boto3.client("ssm")
                        # Adding jitter to avoid high volume of API call simultaneously
                        jitter = random.random()
                        time.sleep(jitter)
                        retry_interval_time = 0
                        exception = None
                        while current_retry < max_retry_times:
                            try:
                                return retryable_api_call(*args, **kwargs)
                            except (ssm_client.exceptions.InternalServerError, ssm_client.exceptions.TooManyUpdates) as e:
                                print('Encounter recoverable Exception {0} when invoking API {1}',
                                    'prepare to retrying {2} times'.format(e, api_name, current_retry))
                                exception = e
                                retry_interval_time = calculate_sleep_interval(current_retry)
                            except ClientError as e:
                                if e.response['Error']['Code'] not in ['InternalFailure', 'ServiceUnavailable']:
                                    raise Exception("Exception %s occurs when invoking API %s" % (e, api_name))
                                exception = e
                                retry_interval_time = calculate_sleep_interval(current_retry)
                            finally:
                                current_retry = current_retry + 1
                                time.sleep(retry_interval_time)
                        raise Exception('Following Exception persists after reaching maximum retry limit: %s' % (exception))
                    return retry

                def calculate_sleep_interval(current_retry):
                    return 2 ** current_retry + random.random()

                @back_off_retry(api_name = 'UpdateServiceSetting')
                def update_service_setting(ssm_client, setting_id, setting_value):
                    get_service_setting_response = ssm_client.get_service_setting(SettingId=setting_id)
                    # Only Enable Data Source if customer not intentionally disable the sources
                    if get_service_setting_response['ServiceSetting']['Status'] == 'Default':
                        ssm_client.update_service_setting(SettingId=setting_id, SettingValue=setting_value)

                @back_off_retry(api_name = 'DescribeConfigurationRecorders')
                def hasEC2RecordingEnabled():
                    config_client = boto3.client("config")
                    response = config_client.describe_configuration_recorders()
                    if len(response.get('ConfigurationRecorders', [])) > 0:
                        for configuration_recorder in response['ConfigurationRecorders']:
                            if (configuration_recorder.get('recordingGroup') and
                                   configuration_recorder.get('recordingGroup').get('allSupported')):
                                return True
                            if (configuration_recorder.get('recordingGroup') and
                                   'AWS::EC2::Instance' in configuration_recorder.resourceTypes):
                                return True
                    return False

                @back_off_retry(api_name = 'DescribeTrustedAdvisorCheck')
                def shouldEnableTrustedAdvisor():
                    support_client = boto3.client('support', region_name='us-east-1')
                    try:
                        support_client.describe_trusted_advisor_checks(language='en')
                        return True
                    except Exception as e:
                        print('Trusted Advisor Data source will not be enabled due to {0}'.format(e))
                        return False

                @back_off_retry(api_name = 'GetEnrollmentStatus')
                def shouldEnableComputeOptimizer():
                    support_regions = [
                      'us-east-2',
                      'us-east-1',
                      'us-west-1',
                      'us-west-2',
                      'ap-south-1',
                      'ap-northeast-2',
                      'ap-southeast-1',
                      'ap-southeast-2',
                      'ap-northeast-1',
                      'ca-central-1',
                      'eu-central-1',
                      'eu-west-1',
                      'eu-west-2',
                      'eu-west-3',
                      'eu-north-1',
                      'sa-east-1'
                    ]
                    client = boto3.client('compute-optimizer')
                    if client.meta.region_name in support_regions:
                        response = client.get_enrollment_status()
                        if response.get('status', '') == 'Active':
                            return True
                    return False
  AttachIAMToInstance:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        description: Composite document for Quick Setup Managing Instances association.
          This document ensures IAM role for instance profile is created in account
          with all required policies
        schemaVersion: '0.3'
        assumeRole: "{{AutomationAssumeRole}}"
        parameters:
          AutomationAssumeRole:
            type: String
          InstanceId:
            type: String
        mainSteps:
          - name: executeAttachIAMToInstance
            action: aws:executeAutomation
            maxAttempts: 20
            timeoutSeconds: 2
            inputs:
              DocumentName: AWS-AttachIAMToInstance
              RuntimeParameters:
                RoleName: !Ref AmazonSSMRoleForInstancesQuickSetup
                ForceReplace: false
                AutomationAssumeRole: "{{ AutomationAssumeRole }}"
                InstanceId: "{{ InstanceId }}"
  SystemAssociationForSsmAgentUpdate:
    Condition:  UpdateSSMAgentChoiceCondition
    Type: AWS::SSM::Association
    Properties:
      AssociationName: SSMQuickSetupSystemAssociationForSsmAgentUpdate
      Targets:
        - Key: !Ref SpecifyTargetTagNameChoice
          Values:
            - !Ref SpecifyTargetTagValueChoice
      ScheduleExpression: rate(14 days)
      Name: AWS-UpdateSSMAgent
  SystemAssociationForInventoryCollection:
    Condition:  CollectInventoryChoiceCondition
    Type: AWS::SSM::Association
    Properties:
      AssociationName: SSMQuickSetupSystemAssociationForInventoryCollection
      Targets:
        - Key: !Ref SpecifyTargetTagNameChoice
          Values:
            - !Ref SpecifyTargetTagValueChoice
      ScheduleExpression: rate(30 minutes)
      Name: AWS-GatherSoftwareInventory
      Parameters:
        applications:
          - Enabled
        awsComponents:
          - Enabled
        networkConfig:
          - Enabled
        instanceDetailedInformation:
          - Enabled
        windowsUpdates:
          - Enabled
        services:
          - Enabled
        windowsRoles:
          - Enabled
        customInventory:
          - Enabled
  SystemAssociationForScanningPatches:
    Condition:  ScanForPatchesChoiceCondition
    Type: AWS::SSM::Association
    Properties:
      AssociationName: SSMQuickSetupSystemAssociationForScanningPatches
      Targets:
        - Key: InstanceIds
          Values:
            - "*"
      ScheduleExpression: rate(30 minutes)
      Name: AWS-RunPatchBaselineAssociation
      Parameters:
        Operation:
          - Scan
      SyncCompliance: MANUAL

  SystemAssociationForInstallAndConfigureCloudWatchAgent:
    Condition:  InstallConfigureCloudWatchChoiceCondition
    Type: AWS::SSM::Association
    Properties:
      AssociationName: SSMQuickSetupSystemAssociationForInstallAndConfigureCloudWatchAgent
      Name: !Ref SSMQuickSetupCloudWatchAgentInstallAndConfigure
      Targets:
        - Key: !Ref SpecifyTargetTagNameChoice
          Values:
            - !Ref SpecifyTargetTagValueChoice


  SSMQuickSetupCloudWatchAgentInstallAndConfigure:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: "2.2"
        description: "A composite document for installing and configuring the CloudWatch Agent."
        parameters:
          sourceInfoWindows:
            description: "Amazon S3 bucket used to store CloudWatch configuration files"
            type: StringMap
            "displayType": "textarea"
            default:
              path: !Sub "https://s3.amazonaws.com/${CloudWatchAgentConfigS3Bucket}/config/standard/windows/"
          sourceInfoLinux:
            description: "Amazon S3 bucket used to store CloudWatch configuration files"
            type: StringMap
            "displayType": "textarea"
            default:
              path: !Sub "https://s3.amazonaws.com/${CloudWatchAgentConfigS3Bucket}/config/standard/linux/"
        mainSteps:
          - action: "aws:runDocument"
            name: "installCWAgent"
            inputs:
              documentType: "SSMDocument"
              documentPath: "AWS-ConfigureAWSPackage"
              documentParameters:
                action:  Install
                name: AmazonCloudWatchAgent
          - action: aws:downloadContent
            precondition:
              StringEquals:
                - platformType
                - Windows
            name: downloadStandardCloudWatchConfigWindows
            inputs:
              sourceType: S3
              sourceInfo: "{{ sourceInfoWindows }}"
              destinationPath: "C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Configs"
          - action: aws:runPowerShellScript
            precondition:
              StringEquals:
                - platformType
                - Windows
            name: runPowerShellScript
            inputs:
              timeoutSeconds: '60'
              runCommand:
                - del /f C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Configs\\*.etag
          - action: "aws:runDocument"
            precondition:
              StringEquals:
                - platformType
                - Windows
            name: "StopCloudWatchWindows"
            inputs:
              documentType: "SSMDocument"
              documentPath: "AmazonCloudWatch-ManageAgent"
              documentParameters:
                action: "stop"
                mode: "ec2"
          - action: "aws:runDocument"
            precondition:
              StringEquals:
                - platformType
                - Windows
            name: "StartCloudWatchWindows"
            inputs:
              documentType: "SSMDocument"
              documentPath: "AmazonCloudWatch-ManageAgent"
              documentParameters:
                action: "start"
                mode: "ec2"
          - action: aws:downloadContent
            precondition:
              StringEquals:
                - platformType
                - Linux
            name: downloadStandardCloudWatchConfigLinux
            inputs:
              sourceType: S3
              sourceInfo: "{{ sourceInfoLinux }}"
              destinationPath: "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d"
          - action: aws:runShellScript
            precondition:
              StringEquals:
                - platformType
                - Linux
            name: runShellScript
            inputs:
              timeoutSeconds: '60'
              runCommand:
                - rm -f /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/*.etag
          - action: "aws:runDocument"
            precondition:
              StringEquals:
                - platformType
                - Linux
            name: "StopCloudWatchLinux"
            inputs:
              documentType: "SSMDocument"
              documentPath: "AmazonCloudWatch-ManageAgent"
              documentParameters:
                action: "stop"
                mode: "ec2"
          - action: "aws:runDocument"
            precondition:
              StringEquals:
                - platformType
                - Linux
            name: "StartCloudWatchLinux"
            inputs:
              documentType: "SSMDocument"
              documentPath: "AmazonCloudWatch-ManageAgent"
              documentParameters:
                action: "start"
                mode: "ec2"



  SystemAssociationForUpdateCloudWatchAgent:
    Condition:  UpdateCloudWatchAgentChoiceCondition
    Type: AWS::SSM::Association
    Properties:
      AssociationName: SSMQuickSetupSystemAssociationForUpdateCloudWatchAgent
      Name: !Ref updateDocument
      Targets:
        - Key: !Ref SpecifyTargetTagNameChoice
          Values:
            - !Ref SpecifyTargetTagValueChoice
      ScheduleExpression: rate(30 days)
  updateDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Name: SSMQuickSetupCloudWatchAgentUpdate
      Content:
        schemaVersion: '2.2'
        description: A composite document for updating CloudWatchAgent.
        mainSteps:
          - precondition:
              StringEquals:
                - platformType
                - Linux
            action: aws:runShellScript
            name: first
            inputs:
              runCommand:
                - sleep 1800
          - precondition:
              StringEquals:
                - platformType
                - Windows
            action: aws:runPowerShellScript
            name: second
            inputs:
              runCommand:
                - Start-Sleep -Seconds 1800
          - action: aws:runDocument
            name: installCWAgent
            inputs:
              documentType: SSMDocument
              documentPath: AWS-ConfigureAWSPackage
              documentParameters:
                action: Install
                name: AmazonCloudWatchAgent
